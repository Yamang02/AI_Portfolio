"""
Get Documents Preview Use Case
Î¨∏ÏÑú ÎØ∏Î¶¨Î≥¥Í∏∞ Ïú†Ïä§ÏºÄÏù¥Ïä§

DocumentLoad ÌÉ≠ÏóêÏÑú Î°úÎìúÎêú Î¨∏ÏÑúÎì§Ïùò ÎØ∏Î¶¨Î≥¥Í∏∞Î•º ÏÉùÏÑ±ÌïòÎäî Use CaseÏûÖÎãàÎã§.
"""

import logging
from typing import Dict, Any
from domain.services.document_management_service import DocumentService

logger = logging.getLogger(__name__)


class GetDocumentsPreviewUseCase:
    """Î¨∏ÏÑú ÎØ∏Î¶¨Î≥¥Í∏∞ Ïú†Ïä§ÏºÄÏù¥Ïä§"""
    
    def __init__(self, document_service: DocumentService):
        self.document_service = document_service
        logger.info("‚úÖ GetDocumentsPreviewUseCase initialized")
    
    async def execute(self) -> Dict[str, Any]:
        """Î¨∏ÏÑú ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÉùÏÑ± Ïã§Ìñâ"""
        try:
            # ÎèÑÎ©îÏù∏ ÏÑúÎπÑÏä§ÏóêÏÑú Î™®Îì† Î¨∏ÏÑú Ï°∞Ìöå
            all_documents = await self.document_service.list_documents()
            
            if not all_documents:
                return {
                    "success": True,
                    "has_documents": False,
                    "message": "üì≠ Î°úÎìúÎêú Î¨∏ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§. ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î•º Î°úÎìúÌïòÍ±∞ÎÇò ÏßÅÏ†ë Î¨∏ÏÑúÎ•º Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî."
                }
            
            # Î¨∏ÏÑú ÏöîÏïΩ Ï†ïÎ≥¥ ÏÉùÏÑ±
            document_summaries = [
                {
                    "document_id": str(doc.document_id),
                    "title": doc.metadata.title if doc.metadata.title else doc.source,
                    "source": doc.source,
                    "content_length": len(doc.content),
                    "document_type": doc.metadata.document_type.value,
                    "preview": doc.content[:200] + "..." if len(doc.content) > 200 else doc.content
                }
                for doc in all_documents
            ]
            
            logger.info(f"‚úÖ Î¨∏ÏÑú ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÉùÏÑ± ÏôÑÎ£å: {len(all_documents)}Í∞ú")
            
            return {
                "success": True,
                "has_documents": True,
                "total_count": len(all_documents),
                "documents": document_summaries
            }
            
        except Exception as e:
            logger.error(f"Documents preview generation failed: {e}")
            return {
                "success": False,
                "error": str(e)
            }
