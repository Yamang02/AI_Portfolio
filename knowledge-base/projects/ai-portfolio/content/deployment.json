[
  {
    "id": "deployment-architecture",
    "project_id": "ai-portfolio",
    "type": "qa", 
    "category": "devops",
    "subcategory": "deployment",
    "title": "배포 아키텍처",
    "question": "현재 배포 환경은 어떻게 구성되어 있나요?",
    "answer": "멀티 환경 배포 전략을 사용합니다:\n\n**환경 구성**:\n- **Development**: 로컬 Docker Compose\n- **Staging**: Railway (staging 브랜치)\n- **Production**: Railway (main 브랜치)\n\n**서비스 분리**:\n- **Frontend**: Vite + React\n- **Backend**: Spring Boot + PostgreSQL\n- **AI Service**: Python FastAPI + Qdrant + Redis",
    "tags": ["deployment", "multi-environment", "railway", "docker-compose"],
    "keywords": ["배포", "환경", "멀티", "스테이징", "프로덕션"],
    "difficulty": "intermediate",
    "priority": 9,
    "related_content": ["railway-platform", "ci-cd-pipeline", "docker-setup"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "railway-platform",
    "project_id": "ai-portfolio",
    "type": "qa",
    "category": "devops", 
    "subcategory": "platform",
    "title": "Railway 플랫폼 선택",
    "question": "Railway를 선택한 이유는?",
    "answer": "1. **간편성**: GitHub 연동 자동 배포\n2. **비용**: 스타트업 친화적 가격 정책\n3. **데이터베이스**: PostgreSQL, Redis 매니지드 서비스\n4. **모니터링**: 기본 로그 및 메트릭 제공\n5. **환경 분리**: 브랜치별 환경 자동 구성",
    "tags": ["railway", "platform", "paas", "github-integration"],
    "keywords": ["Railway", "플랫폼", "자동배포", "GitHub"],
    "difficulty": "beginner",
    "priority": 8,
    "external_links": [
      {
        "title": "Railway 공식 사이트",
        "url": "https://railway.app/",
        "description": "Railway 클라우드 플랫폼"
      }
    ],
    "related_content": ["deployment-architecture", "ci-cd-pipeline"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "ci-cd-pipeline",
    "project_id": "ai-portfolio",
    "type": "qa",
    "category": "devops",
    "subcategory": "automation", 
    "title": "CI/CD 파이프라인",
    "question": "CI/CD 파이프라인은?",
    "answer": "GitHub Actions 기반 자동화:\n\n**배포 단계**:\n1. **코드 푸시** → GitHub\n2. **자동 빌드** → Docker 이미지 생성\n3. **테스트 실행** → 단위/통합 테스트\n4. **배포** → Railway 환경별 배포\n5. **헬스체크** → 서비스 정상 동작 확인",
    "tags": ["ci-cd", "github-actions", "automation", "pipeline"],
    "keywords": ["CI/CD", "자동화", "파이프라인", "GitHub Actions"],
    "difficulty": "intermediate",
    "priority": 9,
    "code_examples": [
      {
        "language": "yaml",
        "code": "# .github/workflows/ 구조\n├── deploy-staging.yml    # staging 브랜치 → Railway Staging\n├── deploy-production.yml # main 브랜치 → Railway Production\n└── test.yml             # PR 시 테스트 실행",
        "description": "GitHub Actions 워크플로우 구조"
      }
    ],
    "related_content": ["deployment-architecture", "docker-setup"],
    "created_at": "2025-08-25T00:00:00Z", 
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "docker-setup",
    "project_id": "ai-portfolio",
    "type": "qa",
    "category": "devops",
    "subcategory": "containerization",
    "title": "Docker 컨테이너 구성",
    "question": "Docker 구성은 어떻게 되어 있나요?",
    "answer": "멀티 컨테이너 아키텍처로 구성되어 있습니다:\n\n**개발 환경**:\n- frontend: React + Vite (포트 5173)\n- backend: Spring Boot (포트 8080)\n- ai-service: FastAPI (포트 8081)\n- postgres: 개발용 데이터베이스\n- redis: 캐시 서버\n- qdrant: 벡터 데이터베이스",
    "tags": ["docker", "containerization", "multi-container", "docker-compose"],
    "keywords": ["Docker", "컨테이너", "멀티컨테이너", "개발환경"],
    "difficulty": "intermediate",
    "priority": 8,
    "code_examples": [
      {
        "language": "yaml", 
        "code": "services:\n  frontend:\n    build: ./frontend\n    ports: [\"5173:5173\"]\n  \n  backend:\n    build: ./backend\n    ports: [\"8080:8080\"]\n    depends_on: [postgres, redis]\n  \n  ai-service:\n    build: ./ai-service\n    ports: [\"8081:8081\"]\n    depends_on: [qdrant, redis]",
        "description": "docker-compose.yml 주요 구성"
      }
    ],
    "related_content": ["deployment-architecture", "environment-variables"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "environment-variables",
    "project_id": "ai-portfolio",
    "type": "qa",
    "category": "devops",
    "subcategory": "configuration",
    "title": "환경 변수 관리",
    "question": "환경 변수는 어떻게 관리하나요?",
    "answer": "환경별 계층화된 구조로 관리합니다:\n\n**Backend (Spring Boot)**:\n- application.yml: 기본 설정\n- application-staging.yml: 스테이징 환경\n- application-production.yml: 프로덕션 환경\n\n**AI Service**:\n- 환경변수로 API 키 및 연결 정보 관리\n- Railway 시크릿 관리 기능 활용",
    "tags": ["environment-variables", "configuration", "spring-profiles", "secrets"],
    "keywords": ["환경변수", "설정", "프로파일", "시크릿"],
    "difficulty": "intermediate",
    "priority": 7,
    "code_examples": [
      {
        "language": "yaml",
        "code": "spring:\n  profiles:\n    active: ${SPRING_PROFILES_ACTIVE:development}\n---\nspring:\n  config:\n    activate:\n      on-profile: production\n  datasource:\n    url: ${DATABASE_URL}\n    username: ${DATABASE_USERNAME}\n    password: ${DATABASE_PASSWORD}",
        "description": "Spring Boot 프로파일별 설정 예시"
      }
    ],
    "related_content": ["docker-setup", "security-monitoring"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z", 
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "security-monitoring",
    "project_id": "ai-portfolio",
    "type": "qa",
    "category": "devops",
    "subcategory": "security",
    "title": "보안 및 모니터링",
    "question": "보안 조치와 모니터링은 어떻게 하나요?",
    "answer": "**API 보안**:\n- CORS 정책 설정\n- Rate Limiting (IP별 요청 제한)\n- Input Validation (XSS, SQL Injection 방지)\n- API 키 서버사이드 관리\n\n**모니터링**:\n- Spring Boot Actuator (헬스체크)\n- Railway 대시보드 활용\n- 애플리케이션 로그 수집\n- 오류율 및 성능 메트릭 추적",
    "tags": ["security", "monitoring", "cors", "rate-limiting", "actuator"],
    "keywords": ["보안", "모니터링", "CORS", "Rate Limiting", "Actuator"],
    "difficulty": "advanced",
    "priority": 8,
    "related_content": ["environment-variables", "ci-cd-pipeline"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  }
]