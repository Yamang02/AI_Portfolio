[
  {
    "id": "ai-service-architecture",
    "project_id": "ai-portfolio", 
    "type": "qa",
    "category": "ai",
    "subcategory": "architecture",
    "title": "AI 서비스 아키텍처",
    "question": "AI 챗봇은 어떤 기술로 구현되었나요?",
    "answer": "Python 기반의 독립 마이크로서비스로 구현되었습니다.\n\n**주요 기술 스택**:\n- **LLM**: Google Gemini API\n- **Framework**: FastAPI\n- **Vector DB**: Qdrant\n- **Cache**: Redis\n- **Embeddings**: Sentence Transformers\n- **Orchestration**: 자체 구현",
    "tags": ["ai-service", "microservice", "python", "fastapi", "gemini"],
    "keywords": ["AI", "챗봇", "마이크로서비스", "파이썬"],
    "difficulty": "intermediate",
    "priority": 10,
    "related_content": ["rag-implementation", "vector-database", "caching-strategy"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "rag-implementation",
    "project_id": "ai-portfolio",
    "type": "qa",
    "category": "ai", 
    "subcategory": "rag",
    "title": "RAG 시스템 구현",
    "question": "RAG(Retrieval Augmented Generation) 시스템은 어떻게 구현했나요?",
    "answer": "벡터 검색 기반의 RAG 파이프라인을 구축했습니다:\n\n**처리 과정**:\n1. **질문 분석**: 사용자 질문의 의도와 카테고리 분석\n2. **벡터 검색**: Qdrant에서 유사한 문서 청크 검색\n3. **컨텍스트 구성**: 검색된 정보로 프롬프트 구성\n4. **응답 생성**: Gemini API로 최종 답변 생성\n5. **결과 캐싱**: Redis에 응답 결과 저장",
    "tags": ["rag", "vector-search", "pipeline", "retrieval", "generation"],
    "keywords": ["RAG", "검색", "생성", "파이프라인", "벡터"],
    "difficulty": "advanced",
    "priority": 9,
    "related_content": ["ai-service-architecture", "vector-database", "prompt-engineering"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system", 
    "version": "1.0"
  },
  {
    "id": "vector-database",
    "project_id": "ai-portfolio",
    "type": "qa",
    "category": "ai",
    "subcategory": "database", 
    "title": "벡터 데이터베이스 선택",
    "question": "벡터 데이터베이스는 왜 Qdrant를 선택했나요?",
    "answer": "1. **성능**: 고속 벡터 유사도 검색\n2. **스케일링**: 대용량 임베딩 처리 가능\n3. **필터링**: 메타데이터 기반 필터링 지원\n4. **API**: RESTful API로 쉬운 통합\n5. **Docker**: 컨테이너 기반 배포 지원",
    "tags": ["qdrant", "vector-database", "similarity-search", "performance"],
    "keywords": ["Qdrant", "벡터데이터베이스", "유사도검색", "성능"],
    "difficulty": "intermediate",
    "priority": 8,
    "external_links": [
      {
        "title": "Qdrant 공식 문서",
        "url": "https://qdrant.tech/documentation/",
        "description": "Qdrant 벡터 데이터베이스 공식 문서"
      }
    ],
    "related_content": ["rag-implementation", "caching-strategy"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "caching-strategy", 
    "project_id": "ai-portfolio",
    "type": "qa",
    "category": "ai",
    "subcategory": "performance",
    "title": "캐싱 전략",
    "question": "캐싱 전략은?",
    "answer": "Redis를 활용한 다층 캐싱:\n\n**캐시 레이어**:\n- **질문-응답 캐시**: 동일 질문에 대한 즉시 응답\n- **벡터 검색 캐시**: 유사 질문의 검색 결과 재사용\n- **컨텍스트 캐시**: 구성된 프롬프트 임시 저장\n\n**캐시 전략**:\n- **TTL**: 1시간 (질문-응답), 24시간 (벡터 검색)\n- **Eviction**: LRU 정책\n- **Warm-up**: 주요 질문들 사전 캐싱",
    "tags": ["redis", "caching", "performance", "ttl", "lru"],
    "keywords": ["캐싱", "Redis", "성능", "TTL", "LRU"],
    "difficulty": "intermediate", 
    "priority": 7,
    "related_content": ["ai-service-architecture", "quality-management"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "prompt-engineering",
    "project_id": "ai-portfolio",
    "type": "qa",
    "category": "ai",
    "subcategory": "prompts",
    "title": "프롬프트 엔지니어링",
    "question": "프롬프트는 어떻게 관리하나요?",
    "answer": "구조화된 프롬프트 시스템으로 관리합니다:\n\n**파일 위치**: `backend/src/main/resources/prompts/`\n- `chatbot-prompts.json`: 구조화된 프롬프트 데이터\n- `chatbot-prompts.md`: 프롬프트 문서화\n\n**프롬프트 구성요소**:\n- **System Message**: AI의 역할과 성격 정의\n- **Context Template**: RAG 검색 결과 삽입 템플릿\n- **Response Format**: 응답 형식 가이드라인",
    "tags": ["prompt-engineering", "system-message", "context", "template"],
    "keywords": ["프롬프트", "엔지니어링", "시스템메시지", "템플릿"],
    "difficulty": "intermediate",
    "priority": 8,
    "code_examples": [
      {
        "language": "json",
        "code": "{\n  \"system_message\": \"당신은 개발자 포트폴리오 전문 AI 어시스턴트입니다.\",\n  \"context_template\": \"다음 정보를 바탕으로 답변해주세요:\\n{context}\",\n  \"response_format\": \"정확하고 구체적으로 답변하되, 친근한 톤을 유지하세요.\"\n}",
        "description": "프롬프트 구조 예시"
      }
    ],
    "related_content": ["rag-implementation", "quality-management"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "quality-management",
    "project_id": "ai-portfolio",
    "type": "qa", 
    "category": "ai",
    "subcategory": "quality",
    "title": "AI 응답 품질 관리",
    "question": "AI 응답의 품질은 어떻게 보장하나요?",
    "answer": "다층적 품질 관리 시스템:\n\n**입력 검증**:\n- 스팸/악성 질문 필터링\n- 질문 길이 및 형식 검증\n- 부적절한 내용 차단\n\n**응답 검증**:\n- 컨텍스트 일치성 확인\n- 환각(Hallucination) 감지\n- 응답 길이 및 구조 검증\n\n**모니터링**:\n- 응답 시간 모니터링\n- 오류율 추적\n- 사용자 만족도 측정",
    "tags": ["quality-assurance", "validation", "monitoring", "hallucination"],
    "keywords": ["품질관리", "검증", "모니터링", "환각감지"],
    "difficulty": "advanced",
    "priority": 9,
    "related_content": ["prompt-engineering", "caching-strategy"],
    "created_at": "2025-08-25T00:00:00Z", 
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  }
]