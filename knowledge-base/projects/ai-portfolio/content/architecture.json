[
  {
    "id": "hexagonal-architecture-overview",
    "project_id": "ai-portfolio",
    "type": "qa",
    "category": "architecture",
    "subcategory": "design-patterns",
    "title": "헥사고날 아키텍처 개요",
    "question": "백엔드는 어떤 아키텍처 패턴을 사용하나요?",
    "answer": "헥사고날 아키텍처(Ports and Adapters)를 적용했습니다. 도메인 로직을 중심으로 하고 외부 의존성을 포트와 어댑터로 분리하여 테스트 가능성과 유지보수성을 향상시켰습니다.\n\n**주요 구성요소**:\n- **Domain**: 핵심 비즈니스 로직과 포트 인터페이스\n- **Application**: 유스케이스 구현체\n- **Infrastructure**: 외부 시스템과의 어댑터 (DB, API, Web)",
    "tags": ["hexagonal", "architecture", "ports-and-adapters", "domain-driven"],
    "keywords": ["아키텍처", "헥사고날", "도메인", "포트", "어댑터"],
    "difficulty": "intermediate",
    "priority": 9,
    "related_content": ["package-structure", "architecture-refactoring"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "package-structure",
    "project_id": "ai-portfolio", 
    "type": "qa",
    "category": "architecture",
    "subcategory": "project-structure",
    "title": "패키지 구조",
    "question": "패키지 구조는 어떻게 구성되어 있나요?",
    "answer": "도메인별로 분리된 구조입니다:",
    "tags": ["package-structure", "java", "spring-boot", "organization"],
    "keywords": ["패키지", "구조", "도메인", "분리"],
    "difficulty": "beginner",
    "priority": 8,
    "code_examples": [
      {
        "language": "text",
        "code": "com.aiportfolio.backend/\n├── domain/\n│   ├── chatbot/\n│   │   ├── model/       # 도메인 모델\n│   │   └── port/        # 포트 인터페이스\n│   └── portfolio/\n│       ├── model/\n│       └── port/\n├── application/         # 유스케이스 구현\n│   ├── chatbot/\n│   └── portfolio/\n└── infrastructure/      # 어댑터 구현\n    ├── persistence/\n    ├── external/\n    └── web/",
        "description": "헥사고날 아키텍처 기반 패키지 구조"
      }
    ],
    "related_content": ["hexagonal-architecture-overview", "architecture-refactoring"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "architecture-refactoring",
    "project_id": "ai-portfolio",
    "type": "qa", 
    "category": "architecture",
    "subcategory": "refactoring",
    "title": "아키텍처 리팩토링 과정",
    "question": "아키텍처 리팩토링 과정에서 주요 개선사항은?",
    "answer": "1. **도메인 격리**: 각 도메인(chatbot, portfolio)을 독립적으로 분리\n2. **의존성 역전**: 도메인이 인프라에 의존하지 않도록 포트 인터페이스 도입\n3. **레이어 분리**: 웹, 애플리케이션, 도메인 레이어 명확히 구분\n4. **테스트 용이성**: 모킹 가능한 구조로 변경",
    "tags": ["refactoring", "domain-isolation", "dependency-inversion", "testing"],
    "keywords": ["리팩토링", "개선", "도메인", "의존성", "테스트"],
    "difficulty": "advanced",
    "priority": 7,
    "related_content": ["hexagonal-architecture-overview", "package-structure"],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z", 
    "author": "system",
    "version": "1.0"
  },
  {
    "id": "spring-boot-choice",
    "project_id": "ai-portfolio",
    "type": "qa",
    "category": "architecture", 
    "subcategory": "technology-choice",
    "title": "Spring Boot 선택 이유",
    "question": "왜 Spring Boot를 선택했나요?",
    "answer": "1. **생산성**: 자동 설정과 스타터 의존성으로 빠른 개발\n2. **생태계**: 풍부한 라이브러리와 커뮤니티 지원\n3. **운영**: Actuator를 통한 모니터링 및 헬스체크\n4. **확장성**: 마이크로서비스 아키텍처로의 확장 용이성",
    "tags": ["spring-boot", "framework", "java", "productivity"],
    "keywords": ["스프링부트", "프레임워크", "선택", "생산성"],
    "difficulty": "beginner",
    "priority": 6,
    "external_links": [
      {
        "title": "Spring Boot 공식 문서",
        "url": "https://spring.io/projects/spring-boot",
        "description": "Spring Boot 공식 문서 및 가이드"
      }
    ],
    "created_at": "2025-08-25T00:00:00Z",
    "last_updated": "2025-08-25T00:00:00Z",
    "author": "system", 
    "version": "1.0"
  }
]