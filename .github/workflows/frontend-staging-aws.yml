name: "[Staging] Frontend → AWS S3 + CloudFront"

on:
  push:
    branches: [ staging ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-staging-aws.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# 환경별 설정은 각 job에서 개별 설정

jobs:
  deploy-staging:
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL }}
        VITE_AI_API_BASE_URL: ${{ vars.GCP_AI_SERVICE_URL }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        
    - name: Create S3 bucket if not exists
      run: |
        aws s3api head-bucket --bucket ${{ vars.AWS_S3_NAME }} 2>/dev/null || \
        aws s3 mb s3://${{ vars.AWS_S3_NAME }} --region ${{ vars.AWS_REGION }}
        
    - name: Upload to S3
      run: |
        cd frontend
        aws s3 sync dist/ s3://${{ vars.AWS_S3_NAME }} --delete --cache-control "public, max-age=31536000"
        
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
          
    - name: Output deployment URL
      run: |
        echo "Staging Frontend deployed to: https://${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }}.cloudfront.net"
        echo "S3 Bucket: s3://${{ vars.AWS_S3_NAME }}"

  deploy-production:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL }}
        VITE_AI_API_BASE_URL: ${{ vars.GCP_AI_SERVICE_URL }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        
    - name: Create S3 bucket if not exists
      run: |
        aws s3api head-bucket --bucket ${{ vars.AWS_S3_NAME }} 2>/dev/null || \
        aws s3 mb s3://${{ vars.AWS_S3_NAME }} --region ${{ vars.AWS_REGION }}
        
    - name: Upload to S3
      run: |
        cd frontend
        aws s3 sync dist/ s3://${{ vars.AWS_S3_NAME }} --delete --cache-control "public, max-age=31536000"
        
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
          
    - name: Output deployment URL
      run: |
        echo "Production Frontend deployed to: https://${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }}.cloudfront.net"
        echo "S3 Bucket: s3://${{ vars.AWS_S3_NAME }}"
