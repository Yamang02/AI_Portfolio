name: "[Staging] Backend API → Google Cloud Run"

on:
  push:
    branches: [ staging ]
    paths:
      - 'backend/**' 
      - 'Dockerfile'
      - '.github/workflows/backend-staging-cloudrun.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'Dockerfile'

env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_MAIN_SERVICE_NAME: ${{ vars.GCP_MAIN_SERVICE_NAME }}
  GCP_MAIN_REGION: ${{ vars.GCP_MAIN_REGION }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build application
      run: |
        cd backend
        mvn clean package -DskipTests
  
  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: staging  # GitHub Environment 사용
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Package application
      run: |
        cd backend
        mvn clean package -DskipTests
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker
    
    - name: Build and push container image
      run: |
        docker build \
          -t gcr.io/$GCP_PROJECT_ID/$GCP_MAIN_SERVICE_NAME:$GITHUB_SHA .
        docker push gcr.io/$GCP_PROJECT_ID/$GCP_MAIN_SERVICE_NAME:$GITHUB_SHA
    
    - name: Deploy to staging environment
      run: |
        gcloud run deploy $GCP_MAIN_SERVICE_NAME \
          --image gcr.io/$GCP_PROJECT_ID/$GCP_MAIN_SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $GCP_MAIN_REGION \
          --allow-unauthenticated \
          --set-env-vars="SPRING_PROFILES_ACTIVE=staging" \
          --set-env-vars="POSTGRE_URL=${{ secrets.POSTGRE_URL }}" \
          --set-env-vars="AI_SERVICE_URL=${{ vars.GCP_AI_SERVICE_URL }}" \
          --set-env-vars="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
          --set-env-vars="REDIS_HOST=${{ vars.REDIS_HOST }}" \
          --set-env-vars="REDIS_PORT=${{ vars.REDIS_PORT }}" \
          --set-env-vars="REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" \
          --set-env-vars="REDIS_DATABASE=${{ vars.REDIS_DATABASE }}" \
          --set-env-vars="REDIS_SSL=${{ vars.REDIS_SSL }}" \
          --set-env-vars="JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/./urandom" \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 20 \
          --timeout 600 \
          --cpu-boost \
          --startup-probe="httpGet.path=/actuator/health,httpGet.port=8080,initialDelaySeconds=30,timeoutSeconds=5,periodSeconds=10,failureThreshold=6"

  # 백엔드 API 서버만 배포 (프론트엔드는 별도 S3+CloudFront 배포)