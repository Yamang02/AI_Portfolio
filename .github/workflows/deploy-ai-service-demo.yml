name: "[Demo](AI Service) HuggingFace Spaces Clean Architecture Deployment"

on:
  push:
    branches: [ demo_ai-rag ]
    paths:
      - 'ai-service/**'
  pull_request:
    branches: [ demo_ai-rag ]
    paths:
      - 'ai-service/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: demo ai rag
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install HuggingFace Hub
      run: pip install huggingface_hub
      
    - name: Validate Clean Architecture Structure
      run: |
        cd ai-service
        echo "üîç Validating Clean Architecture structure..."
        
        # Check required directories
        for dir in "presentation/demo" "app/application" "app/domain" "app/infrastructure"; do
          if [ ! -d "$dir" ]; then
            echo "‚ùå Missing directory: $dir"
            exit 1
          fi
          echo "‚úÖ Found: $dir"
        done
        
        # Check key files
        for file in "app.py" "presentation/demo/demo_controller.py" "requirements-demo.txt"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing file: $file"
            exit 1
          fi
          echo "‚úÖ Found: $file"
        done
        
        echo "‚úÖ Clean Architecture structure validated"
      
    - name: Test Clean Architecture Imports
      run: |
        cd ai-service
        python -c "
        import sys
        sys.path.insert(0, '.')
        
        print('üß™ Testing Clean Architecture imports...')
        
        try:
          from presentation.demo.demo_controller import DemoController
          from app.application.rag.rag_use_case import RAGUseCase
          from app.domain.entities.chat import ChatRequest
          from app.infrastructure.demo.demo_factory import DemoServiceFactory
          
          print('‚úÖ All Clean Architecture imports successful')
          
          # Test basic instantiation
          factory = DemoServiceFactory()
          controller = DemoController()
          
          print('‚úÖ Clean Architecture components instantiated successfully')
          
        except Exception as e:
          print(f'‚ùå Import test failed: {e}')
          import traceback
          traceback.print_exc()
          exit(1)
        "
        
    - name: Prepare HuggingFace Spaces files
      run: |
        cd ai-service
        
        echo "üì¶ Preparing Clean Architecture demo for HuggingFace Spaces..."
        
        # Copy Clean Architecture specific files
        cp deployment/README-HuggingFace-Clean.md README.md
        cp deployment/Dockerfile.spaces-clean Dockerfile
        
        # Validate all required files are present
        echo "üìã Validating deployment files..."
        for file in "app.py" "README.md" "Dockerfile" "requirements-demo.txt"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing deployment file: $file"
            exit 1
          fi
          echo "‚úÖ Ready: $file"
        done
        
        # Show directory structure for debugging
        echo "üìÅ Final directory structure:"
        find . -type f -name "*.py" | head -20
        
    - name: Deploy to HuggingFace Spaces
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_USERNAME: ${{ secrets.HF_USERNAME }}
      run: |
        cd ai-service
        python -c "
        from huggingface_hub import HfApi, create_repo
        import os
        
        api = HfApi(token=os.environ['HF_TOKEN'])
        repo_id = f\"{os.environ['HF_USERNAME']}/ai-portfolio-rag-demo\"
        
        print(f'üöÄ Deploying Clean Architecture RAG Demo to {repo_id}')
        
        try:
            # Create space if it doesn't exist
            create_repo(
                repo_id=repo_id,
                repo_type='space',
                space_sdk='gradio',
                token=os.environ['HF_TOKEN'],
                exist_ok=True
            )
            print(f'‚úÖ Space {repo_id} ready')
            
            # Upload Clean Architecture files
            api.upload_folder(
                folder_path='.',
                repo_id=repo_id,
                repo_type='space',
                token=os.environ['HF_TOKEN'],
                ignore_patterns=[
                    '__pycache__', 
                    '*.pyc', 
                    'docker-compose*', 
                    'Dockerfile.dev*',
                    'Dockerfile.spaces',  # Keep only Dockerfile (clean version)
                    'deployment/',
                    'scripts/',
                    'tests/',
                    '.pytest_cache',
                    'app/core/',  # Old structure remnants
                    'demo/',      # Old demo structure
                    'main_clean.py'  # Local development only
                ]
            )
            print(f'‚úÖ Clean Architecture files uploaded to {repo_id}')
            
            # Verify key files were uploaded
            files = api.list_repo_files(repo_id=repo_id, repo_type='space')
            required_files = ['app.py', 'README.md', 'requirements-demo.txt', 'Dockerfile']
            
            missing_files = [f for f in required_files if f not in files]
            if missing_files:
                raise Exception(f'Missing required files: {missing_files}')
            
            print(f'‚úÖ All required files verified: {required_files}')
            
        except Exception as e:
            print(f'‚ùå Deployment failed: {e}')
            raise e
        "
        
    - name: Verify Deployment
      run: |
        echo "üéâ Clean Architecture RAG Demo deployed successfully!"
        echo ""
        echo "üîó Demo URL: https://huggingface.co/spaces/${{ secrets.HF_USERNAME }}/ai-portfolio-rag-demo"
        echo "‚öôÔ∏è  Settings: https://huggingface.co/spaces/${{ secrets.HF_USERNAME }}/ai-portfolio-rag-demo/settings"
        echo "üìä Logs: https://huggingface.co/spaces/${{ secrets.HF_USERNAME }}/ai-portfolio-rag-demo/logs"
        echo ""
        echo "‚ú® Features deployed:"
        echo "  ‚Ä¢ Clean Architecture (Domain-Application-Infrastructure)"
        echo "  ‚Ä¢ Real vector embeddings (sentence-transformers)"
        echo "  ‚Ä¢ Interactive document processing"
        echo "  ‚Ä¢ Live RAG pipeline demonstration"
        echo ""
        echo "üöÄ The demo will be available in 2-3 minutes at the URL above!"