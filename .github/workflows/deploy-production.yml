name: Deploy to Production

on:
  push:
    branches: [ main ]  # main 브랜치에 푸시시 실행
  pull_request:
    branches: [ main ]


env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ai-portfolio
  REGION: asia-northeast3

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Build and skip tests (DB not available in CI)
      run: |
        cd backend
        mvn clean package -DskipTests
  
  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: production  # GitHub Environment 사용
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Build application
      run: |
        cd backend
        mvn clean package -DskipTests
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker
    
    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --set-env-vars="SPRING_PROFILES_ACTIVE=production" \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
          --set-env-vars="REDIS_HOST=${{ secrets.REDIS_HOST }}" \
          --set-env-vars="REDIS_PORT=${{ secrets.REDIS_PORT }}" \
          --set-env-vars="REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" \
          --set-env-vars="REDIS_SSL=true" \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 20 \
          --timeout 600 \
          --cpu-boost \
          --startup-probe="httpGet.path=/actuator/health,httpGet.port=8080,initialDelaySeconds=30,timeoutSeconds=5,periodSeconds=10,failureThreshold=6"

  # 프론트엔드 배포는 백엔드 Docker에서 통합 처리하므로 제거
  # 백엔드 Docker 이미지에 프론트엔드 정적 파일이 포함됨