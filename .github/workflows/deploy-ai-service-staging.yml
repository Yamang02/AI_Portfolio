name: Deploy AI Service to Staging

on:
  push:
    branches: [ staging ]
    paths: 
      - 'ai-service/**'
      - '.github/workflows/deploy-ai-service-staging.yml'
  pull_request:
    branches: [ staging ]
    paths: 
      - 'ai-service/**'

env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_AI_SERVICE_NAME: ${{ vars.GCP_AI_SERVICE_NAME }}
  GCP_AI_REGION: ${{ vars.GCP_AI_REGION }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd ai-service
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        cd ai-service
        # pytest tests/ --cov=app/
        echo "AI Service 테스트 실행 (향후 구현)"
  
  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker
    
    - name: Set up Docker Buildx (캐시 최적화)
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push AI Service Docker image (최적화됨)
      uses: docker/build-push-action@v5
      with:
        context: ./ai-service
        file: ./ai-service/Dockerfile
        push: true
        tags: gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_AI_SERVICE_NAME }}:${{ github.sha }}
        build-args: |
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Deploy AI Service to Cloud Run Staging
      run: |
        gcloud run deploy $GCP_AI_SERVICE_NAME \
          --image gcr.io/$GCP_PROJECT_ID/$GCP_AI_SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $GCP_AI_REGION \
          --allow-unauthenticated \
          --set-env-vars="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
          --set-env-vars="GEMINI_MODEL=${{ vars.GEMINI_MODEL }}" \
          --set-env-vars="LLM_TEMPERATURE=${{ vars.LLM_TEMPERATURE }}" \
          --set-env-vars="LLM_MAX_OUTPUT_TOKENS=${{ vars.LLM_MAX_OUTPUT_TOKENS }}" \
          --set-env-vars="QDRANT_URL=${{ secrets.QDRANT_URL }}" \
          --set-env-vars="QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}" \
          --set-env-vars="REDIS_HOST=${{ vars.REDIS_HOST }}" \
          --set-env-vars="REDIS_PORT=${{ vars.REDIS_PORT }}" \
          --set-env-vars="REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" \
          --set-env-vars="REDIS__DB=0" \
          --set-env-vars="REDIS__KEY_PREFIX=ai-staging:" \
          --set-env-vars="REDIS_SSL=${{ vars.REDIS_SSL }}" \
          --set-env-vars="LOG_LEVEL=${{ vars.LOG_LEVEL }}" \
          --memory 2Gi \
          --cpu 1 \
          --max-instances 5 \
          --timeout 900 \
          --cpu-boost \
          --startup-probe="httpGet.path=/api/v1/health,httpGet.port=8000,initialDelaySeconds=60,timeoutSeconds=10,periodSeconds=15,failureThreshold=8"

    - name: Verify AI Service deployment
      run: |
        sleep 30
        SERVICE_URL=$(gcloud run services describe $GCP_AI_SERVICE_NAME --region=$GCP_AI_REGION --format='value(status.url)')
        echo "AI Service URL: $SERVICE_URL"
        curl -f "$SERVICE_URL/api/v1/health" || exit 1