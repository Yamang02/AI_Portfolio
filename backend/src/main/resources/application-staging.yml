server:
  port: ${PORT:8080}  # Cloud Run이 제공하는 동적 포트 사용

spring:
  application:
    name: ai-portfolio-backend-staging
  
  # Railway PostgreSQL 설정 (URL 변환 처리)
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  
  jpa:
    hibernate:
      ddl-auto: validate  # 프로덕션 준비: 스키마 검증만 수행
    show-sql: false     # 프로덕션 준비: SQL 로그 비활성화
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

  # Redis Cloud 설정 (스테이징)
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DB_IDX:0}
      timeout: ${REDIS_TIMEOUT:2000}ms
      ssl:
        enabled: ${REDIS_SSL:false}
      lettuce:
        pool:
          max-active: ${REDIS_MAX_ACTIVE:8}
          max-idle: ${REDIS_MAX_IDLE:8}
          min-idle: 0
          max-wait: -1ms
        shutdown-timeout: 100ms
  
  # CORS 설정 (스테이징 도메인 추가)
  web:
    cors:
      allowed-origins: 
        - "http://localhost:3000"
        - "http://localhost:5173"
        - "https://ai-portfolio-chatbot-493721639129.asia-northeast3.run.app"
        - "https://your-staging-domain.run.app"  # 스테이징 도메인
      allowed-methods: 
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowed-headers: "*"
      allow-credentials: true

# Swagger 비활성화 (스테이징에서는 선택적)
springdoc:
  api-docs:
    enabled: false
  swagger-ui:
    enabled: false

# Actuator 설정 (Health Check용)
management:
  endpoints:
    web:
      exposure:
        include: health,info,readiness,liveness
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true

# 로깅 설정 (프로덕션 레벨)
logging:
  level:
    com.aiportfolio.backend: INFO
    org.springframework.web: WARN
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%level] %logger{36} - %msg%n"

# 환경변수 설정 (기존 패턴 유지)
app:
  gemini:
    api-key: ${GEMINI_API_KEY}
    model-name: gemini-2.5-flash
  github:
    username: Yamang02  # 하드코딩
  contact:
    email: ljj0210@gmail.com  # 하드코딩
  security:
    rate-limit:
      window: 60000
      max-requests: 50  # 스테이징에서는 더 제한적